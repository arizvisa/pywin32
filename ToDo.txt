Some things that still need work for Python 3.0


odbc - input binding needs changes for longs, use SQL_C_LONG instead SQL_C_SBIGINT if value fits in a long
 
Swig doesn't handle com_interface_parent, adsi will not build

Several types set Py_TPFLAGS_BASETYPE but do not have required infrastructure to actually subclass.

servicemanager (PythonService.cpp) - Py_SetProgram and PySys_SetArgv don't work for 2.x, need char * args
	but __argv is NULL

pythoncom - Get*String routines for looking up error codes return bytes instead of unicode

Pythonwin -
	xxx LVITEM and TVITEM conversions use PyWinobject_AsTCHAR, result needs to be freed
	xxx LV_COLUMN conversion - same as above

	xxx win32uimodule - Python_callback has 64-bit issues with HWND, WPARAM, LPARAM

	xxx win32util.cpp - GetReprText needs fixes for Py3k unicode repr

	is_uiObject leaks a ref to _obj_ for python classes with simulated subclassing of mfc object

	'stop at exceptions' option doesn't do anything  (even in 2.x)

	repr for MFC objects needs work, currently doesn't print associated python class due to recursion -
		fixed now, but requires using new-style class in 2.x (pywin.mfc.object.Object)

	Work on direct subclassing of MFC types
		tp_flags must include Py_TPFLAGS_BASETYPE
		Requires that each type have tp_new, which needs to set the object's type to passed in type
		As prelim work, convert functions that create MFC objects (CreateDialog, CreateMenu, etc) to keyword args,
			as they will be very similar to tp_new for created type

	

	Pasted text ends up with empty lines

	Autoindent gets spaces/tabs wrong

	Figure out a clean way to switch between commctrl.*A and commctrl.*W constants for hooking messages

	Add /ENTRY:wWinMainCRTStartup to linker args

	Need to override GetWindowText for scintilla controls - for WM_GETTEXT, text is returned as utf-8 bytes instead of wide-char


